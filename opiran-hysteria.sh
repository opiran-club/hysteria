#!/bin/bash

red() {
    echo -e "\033[31m\033[01m$1\033[0m"
}

green() {
    echo -e "\033[32m\033[01m$1\033[0m"
}

yellow() {
    echo -e "\033[33m\033[01m$1\033[0m"
}

RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[36m"
PLAIN='\033[0m'

# system recognizing
REGEX=("debian" "ubuntu" "centos|red hat|kernel|oracle linux|alma|rocky" "'amazon linux'")
RELEASE=("Debian" "Ubuntu" "CentOS" "CentOS")
PACKAGE_UPDATE=("apt -y update" "apt -y update" "yum -y update" "yum -y update")
PACKAGE_INSTALL=("apt -y install" "apt -y install" "yum -y install" "yum -y install")
PACKAGE_REMOVE=("apt -y remove" "apt -y remove" "yum -y remove" "yum -y remove")
PACKAGE_UNINSTALL=("apt -y autoremove" "apt -y autoremove" "yum -y autoremove" "yum -y autoremove")

[[ $EUID -ne 0 ]] && red "need to root previllage" && exit 1

CMD=("$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \" -f2)" "$(hostnamectl 2>/dev/null | grep -i system | cut -d : -f2)" "$(lsb_release -sd 2>/dev/null)" "$(grep -i description /etc/lsb-release 2>/dev/null | cut -d \" -f2)" "$(grep . /etc/redhat-release 2>/dev/null)" "$(grep . /etc/issue 2>/dev/null | cut -d \\ -f1 | sed '/^[ ]*$/d')") 

for i in "${CMD[@]}"; do
    SYS="$i" && [[ -n $SYS ]] && break
done

for ((int = 0; int < ${#REGEX[@]}; int++)); do
    [[ $(echo "$SYS" | tr '[:upper:]' '[:lower:]') =~ ${REGEX[int]} ]] && SYSTEM="${RELEASE[int]}" && [[ -n $SYSTEM ]] && break
done

IP=$(curl -s6m8 ip.sb) || IP=$(curl -s4m8 ip.sb)

if [[ -n $(echo $IP | grep ":") ]]; then
    IP="[$IP]"
fi

check_tun(){
    TUN=$(cat /dev/net/tun 2>&1 | tr '[:upper:]' '[:lower:]')
    if [[ ! $TUN =~ 'in bad state' ]] && [[ ! $TUN =~ 'error' ]] && [[ ! $TUN =~ 'The file handle is in bad interpreter' ]]; then
        if [[ $vpsvirt == "openvz" ]]; then
            wget -N --no-check-certificate https://raw.githubusercontents.com/Misaka-blog/tun-script/master/tun.sh && bash tun.sh
        else
            red "It is detected that the TUN module is not turned on, please go to the VPS control panel to turn it on" 
            exit 1
        fi
    fi
}

checkCentOS8(){
    if [[ -n $(cat /etc/os-release | grep "CentOS Linux 8") ]]; then
        yellow "It is detected that the current VPS system is CentOS 8, whether to upgrade to CentOS Stream 8 to ensure the normal installation of software packages？"
        read -p "do you confirm [y/n]：" comfirmCentOSStream
        if [[ $comfirmCentOSStream == "y" ]]; then
            yellow "Upgrading to CentOS Stream 8 for you will take about 10-30 minutes"
            sleep 1
            sed -i -e "s|releasever|releasever-stream|g" /etc/yum.repos.d/CentOS-*
            yum clean all && yum makecache
            dnf swap centos-linux-repos centos-stream-repos distro-sync -y
        else
            red "The upgrade process has been canceled and the script will exit soon!"
            exit 1
        fi
    fi
}

archAffix(){
    case "$(uname -m)" in
        i686 | i386) echo '386' ;;
        x86_64 | amd64) echo 'amd64' ;;
        armv5tel) echo 'arm-5' ;;
        armv7 | armv7l) echo 'arm-7' ;;
        armv8 | aarch64) echo 'arm64' ;;
        s390x) echo 's390x' ;;
        *) red " Unsupported CPU！" && exit 1 ;;
    esac
    return 0
}

install_base() {
    if [[ $SYSTEM != "CentOS" ]]; then
        ${PACKAGE_UPDATE[int]}
    fi
    ${PACKAGE_INSTALL[int]} wget curl sudo
}

downloadHysteria() {
    rm -rf /root/Hysteria
    mkdir /root/Hysteria
    last_version=$(curl -Ls "https://api.github.com/repos/HyNetwork/Hysteria/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    if [[ ! -n "$last_version" ]]; then
        red "Failed to detect Hysteria version, may exceed Github API limit, please try again later"
        exit 1
    fi
    yellow "The latest version of Hysteria was detected: ${last_version}, installation started"
    wget -N --no-check-certificate https://fast.imkcp666.workers.dev/https://github.com/HyNetwork/Hysteria/releases/download/${last_version}/Hysteria-tun-linux-$(archAffix) -O /usr/bin/hysteria
    if [[ $? -ne 0 ]]; then
        red "Downloading Hysteria failed, please make sure your server can connect and download files from Github"
        exit 1
    fi
    chmod +x /usr/bin/hysteria
}

makeConfig() {
    read -p "Hysteria connection port（default：40000）：" PORT
    [[ -z $PORT ]] && PORT=40000
    read -p "Please enter the connection obfuscation password for Hysteria (randomly generated by default)：" OBFS
    [[ -z $OBFS ]] && OBFS=$(date +%s%N | md5sum | cut -c 1-32)
    read -p "VPS Upload speed（default:50m）：" UPVPS
    [[ -z $UPVPS ]] && UPVPS=50
    read -p "VPS Download speed（default:100m）：" DNVPS
    [[ -z $DNVPS ]] && DNVPS=100
    read -p "your local upload speed (default 100m)：" UP
    [[ -z $UP ]] && UP=100
    read -p "your local download speed (default 100m)：" DOWN
    [[ -z $DOWN ]] && DOWN=100
    openssl ecparam -genkey -name prime256v1 -out /root/Hysteria/private.key
    openssl req -new -x509 -days 36500 -key /root/Hysteria/private.key -out /root/Hysteria/cert.crt -subj "/CN=www.bilibili.com"
    cat <<EOF > /root/Hysteria/server.json
{
    "listen": ":$PORT",
    "cert": "/root/Hysteria/cert.crt",
    "key": "/root/Hysteria/private.key",
    "obfs": "$OBFS"
    "up_mbps": UPVPS,
    "down_mbps": DNVPS

}
EOF
    cat <<EOF > /root/Hysteria/client.json
{
    "server": "$IP:$PORT",
    "obfs": "$OBFS",
    "up_mbps": "$UP" ,
    "down_mbps": "$DOWN",
    "insecure": true,
    "socks5": {
        "listen": "127.0.0.1:1080"
    },
    "http": {
        "listen": "127.0.0.1:1081"
    }
}
EOF
    cat <<'TEXT' > /etc/systemd/system/hysteria.service
[Unit]
Description=Hysiteria Server
After=network.target

[Install]
WantedBy=multi-user.target

[Service]
Type=simple
WorkingDirectory=/root/Hysteria
ExecStart=/usr/bin/hysteria -c /root/Hysteria/server.json server
Restart=always
TEXT
}

installBBR() {
    result=$(lsmod | grep bbr)
    if [[ $result != "" ]]; then
        green "BBR Installed"
        INSTALL_BBR=false
        return
    fi
    res=`systemd-detect-virt`
    if [[ $res =~ openvz|lxc ]]; then
        colorEcho $BLUE "Since your VPS is a VPS with OpenVZ or LXC architecture, skip the installation"
        INSTALL_BBR=false
        return
    fi
    
    echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
    echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
    sysctl -p
    result=$(lsmod | grep bbr)
    if [[ "$result" != "" ]]; then
        green "BBR enabled"
        INSTALL_BBR=false
        return
    fi

    green "Installing BBR module..."
    if [[ $SYSTEM = "CentOS" ]]; then
            rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
            rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm
            ${PACKAGE_INSTALL[int]} --enablerepo=elrepo-kernel kernel-ml
            ${PACKAGE_REMOVE[int]} kernel-3.*
            grub2-set-default 0
            echo "tcp_bbr" >> /etc/modules-load.d/modules.conf
            INSTALL_BBR=true
    else
        ${PACKAGE_INSTALL[int]} --install-recommends linux-generic-hwe-16.04
        grub-set-default 0
        echo "tcp_bbr" >> /etc/modules-load.d/modules.conf
        INSTALL_BBR=true
    fi
}

installHysteria() {
    checkCentOS8
    install_base
    downloadHysteria
    installBBR
    makeConfig
    systemctl enable hysteria
    systemctl start hysteria
    check_status
    if [[ -n $(service hysteria status 2>/dev/null | grep "inactive") ]]; then
        red "Hysteria Server installation failed"
    elif [[ -n $(service hysteria status 2>/dev/null | grep "active") ]]; then
        green "Hysteria Server installation succeed"
        yellow "The server configuration file has been saved to /root/Hysteria/server.json"
        yellow "The client configuration file has been saved to /root/Hysteria/client.json"
    fi
}

start_hysteria() {
    systemctl start hysteria
    green "Hysteria started and enabled！"
}

stop_hysteria() {
    systemctl stop hysteria
    green "Hysteria stopped and disabled！"
}

restart(){
    systemctl restart hysteria
    green "Hysteria restarted！"
}

uninstall(){
    systemctl stop hysteria
    systemctl disable hysteria
    rm -rf /root/Hysteria
    rm -f /usr/bin/hysteria
    rm -f /etc/systemd/system/hysteria.service
    green "Hysteria uninstalled successfully！"
}

check_status(){
    if [[ -n $(service hysteria status 2>/dev/null | grep "inactive") ]]; then
        status="${RED}Hysteria server inactive！${PLAIN}"
    elif [[ -n $(service hysteria status 2>/dev/null | grep "active") ]]; then
        status="${GREEN}Hysteria server is active！${PLAIN}"
    else
        status="${RED} Hysteria not installed yet！${PLAIN}"
    fi
}

menu() {
    clear
    check_status

    echo "#############################################################"
    echo -e "#                 ${RED} OPIran Hysteria${PLAIN}                   #"
    echo -e "# ${GREEN}作者${PLAIN}: Misaka No                                           #"
    echo -e "# ${GREEN}网址${PLAIN}: https://owo.misaka.rest                             #"
    echo -e "# ${GREEN}论坛${PLAIN}: https://owo.misaka.rest                             #"
    echo -e "# ${GREEN}TG群${PLAIN}: https://t.me/misakanetcn                            #"
    echo "#############################################################"
    echo ""

    echo -e "  ${GREEN}1.${PLAIN}  安装Hysieria "
    echo -e "  ${GREEN}2.  ${RED}卸载Hysieria ${PLAIN}"
    echo " -------------"
    echo -e "  ${GREEN}3.${PLAIN}  启动Hysieria "
    echo -e "  ${GREEN}4.${PLAIN}  重启Hysieria "
    echo -e "  ${GREEN}5.${PLAIN}  停止Hysieria "
    echo " -------------"
    echo -e "  ${GREEN}0.${PLAIN} 退出"
    echo ""
    echo -e "Hysteria 状态：$status"
    echo ""
    read -p " 请选择操作[0-5]：" answer
    case $answer in
        1) installHysteria ;;
        2) uninstall ;;
        3) start_hysteria ;;
        4) restart ;;
        5) stop_hysteria ;;
    esac
}

menu
